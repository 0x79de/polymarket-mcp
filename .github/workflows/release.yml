name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: '.exe'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
          
    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools
      
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Create archive
      shell: bash
      run: |
        binary_name="polymarket-mcp${{ matrix.suffix }}"
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          7z a "polymarket-mcp-${{ matrix.target }}.zip" "${binary_name}"
          echo "ASSET=polymarket-mcp-${{ matrix.target }}.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/${binary_name}" .
          tar -czf "polymarket-mcp-${{ matrix.target }}.tar.gz" "${binary_name}"
          echo "ASSET=polymarket-mcp-${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
        fi
        
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        files: ./${{ env.ASSET }}

